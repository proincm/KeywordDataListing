lines_in_view = len(view.lines(view.visible_region()))
first_line,_ = view.rowcol(view.visible_region().begin())
view.show(view.text_point(first_line + lines_in_view, 0))



import sublime, sublime_plugin
class ScrollLinesFixedCommand(sublime_plugin.TextCommand):
	"""Must work exactly as builtin scroll_lines command, but without moving the cursor when it goes out of the visible area."""
	def run(self, edit, amount, by="lines"):
		# only needed if one empty selection
		if by != "lines" or (len(self.view.sel()) == 1 and self.view.sel()[0].empty()):
			maxy = self.view.layout_extent()[1] - self.view.line_height()
			curx, cury = self.view.viewport_position()
			if by == "pages":
				delta = self.view.viewport_extent()[1]
			else:
				delta = self.view.line_height()
			nexty = min(max(cury - delta * amount, 0), maxy)
			self.view.set_viewport_position((curx, nexty))
		else:
			self.view.run_command("scroll_lines", {"amount": amount})
# { "keys": "ctrl+up"], "command": "scroll_lines_fixed", "args": {"amount": 1.0 } },
# { "keys": "ctrl+down"], "command": "scroll_lines_fixed", "args": {"amount": -1.0 } },
# { "keys": "ctrl+pageup"], "command": "scroll_lines_fixed", "args": {"by": "pages", "amount": 1.0 } },
# { "keys": "ctrl+pagedown"], "command": "scroll_lines_fixed", "args": {"by": "pages", "amount": -1.0 } },
